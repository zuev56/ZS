// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Zs.Home.Jobs.Hangfire.WeatherRegistrator;

#nullable disable

namespace Zs.Home.Jobs.Hangfire.WeatherRegistrator.Migrations
{
    [DbContext(typeof(WeatherRegistratorDbContext))]
    partial class WeatherRegistratorDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("weather")
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("Zs.Home.Jobs.Hangfire.WeatherRegistrator.Models.Place", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now() at time zone ('utc')");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.HasKey("Id")
                        .HasName("pk_places");

                    b.ToTable("places", "weather");
                });

            modelBuilder.Entity("Zs.Home.Jobs.Hangfire.WeatherRegistrator.Models.Source", b =>
                {
                    b.Property<short>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<short>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now() at time zone ('utc')");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<short>("PlaceId")
                        .HasColumnType("smallint")
                        .HasColumnName("place_id");

                    b.HasKey("Id")
                        .HasName("pk_sources");

                    b.HasIndex("PlaceId")
                        .HasDatabaseName("ix_sources_place_id");

                    b.ToTable("sources", "weather");
                });

            modelBuilder.Entity("Zs.Home.Jobs.Hangfire.WeatherRegistrator.Models.WeatherData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<double?>("CO2")
                        .HasColumnType("double precision")
                        .HasColumnName("co2");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("now() at time zone ('utc')");

                    b.Property<double?>("Humidity")
                        .HasColumnType("double precision")
                        .HasColumnName("humidity");

                    b.Property<double?>("Pressure")
                        .HasColumnType("double precision")
                        .HasColumnName("pressure");

                    b.Property<short>("SourceId")
                        .HasColumnType("smallint")
                        .HasColumnName("source_id");

                    b.Property<double?>("Temperature")
                        .HasColumnType("double precision")
                        .HasColumnName("temperature");

                    b.HasKey("Id")
                        .HasName("pk_weather_data");

                    b.HasIndex("SourceId")
                        .HasDatabaseName("ix_weather_data_source_id");

                    b.ToTable("weather_data", "weather");
                });

            modelBuilder.Entity("Zs.Home.Jobs.Hangfire.WeatherRegistrator.Models.Source", b =>
                {
                    b.HasOne("Zs.Home.Jobs.Hangfire.WeatherRegistrator.Models.Place", "Place")
                        .WithMany("Sources")
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_sources_places_place_id");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("Zs.Home.Jobs.Hangfire.WeatherRegistrator.Models.WeatherData", b =>
                {
                    b.HasOne("Zs.Home.Jobs.Hangfire.WeatherRegistrator.Models.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_weather_data_sources_source_id");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Zs.Home.Jobs.Hangfire.WeatherRegistrator.Models.Place", b =>
                {
                    b.Navigation("Sources");
                });
#pragma warning restore 612, 618
        }
    }
}
